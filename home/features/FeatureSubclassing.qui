<Control name="FeatureSubclassing">
<prototype>
<Feature>

<name>Subclassing</name>

<description>
Quick controls can be easily subclassed to create true prototype-based
JavaScript subclasses. These inherit DOM elements, CSS rules, and behavior
from their parent classes in a well-defined way. One use for subclassing
is to create templates for dialogs, page sections, or complete pages (such as
the <GalleryLink>GalleryPage</GalleryLink> example). Subclasses generally allow
for clean factoring of a user interface into easily maintainable and reusable
components.
</description>

<control>
<pre>
&lt;!-- Sample dialog template --&gt;
&lt;Control name="OrangeDialog"&gt;

&lt;prototype&gt;
  &lt;Dialog&gt;
    &lt;h1 id="OrangeDialog_title"/&gt;
    &lt;div id="OrangeDialog_content"/&gt;
    &lt;div id="OrangeDialog_buttons"/&gt;
  &lt;/Dialog&gt;
&lt;/prototype&gt;

&lt;style&gt;
{
  border: 2px solid orange;
  …
}
&lt;/style&gt;

&lt;script&gt;
OrangeDialog.prototype.extend({
buttons: Control.element(
  "OrangeDialog_buttons").content(),
…
});
&lt;/script&gt;

&lt;/Control&gt;
</pre>
</control>

<example>
<pre>
&lt;!-- Sample use of template --&gt;
&lt;Control name="SampleDialog"&gt;

&lt;prototype&gt;
  &lt;OrangeDialog
    title="What do you think?"&gt;
    It's easy to use subclassing
    to create a new dialog --
    or an entirely new template.
    &lt;buttons&gt;
      &lt;OrangeButton&gt;
        Huh
      &lt;/OrangeButton&gt;
      &lt;OrangeButton&gt;
        Neat!
      &lt;/OrangeButton&gt;
    &lt;/buttons&gt;
  &lt;/OrangeDialog&gt;
&lt;/prototype&gt;

&lt;/Control&gt;
</pre>
</example>

<result>
<FeatureSubclassingDemo/>
</result>

</Feature>
</prototype>
</Control>
