<Control name="FeatureScoping">
<prototype>
<Feature>

<name>Prevent style rule collisions with style scoping</name>

<description>
    
<p>
    <ScreencastLink href="http://www.youtube.com/watch?v=uZSlmav9_w8">Video: How style scoping works</ScreencastLink>
</p>

<p>
Controls on a page are as independent of each other as possible, so you can mix controls freely without concern for collisions in the namespaces for DOM element IDs or CSS rule names. For example, the QuickUI compiler ensures that a control’s CSS only applies to instances of that control: each control defines a corresponding CSS class, and the DOM roots of all that control’s instances are stamped with that CSS class. So if two controls define CSS for a class called, say, “message”, the generated CSS will apply the correct rules to each control.
</p>

</description>

<control>
<pre>
&lt;Control name="Red"&gt;
&lt;div class="message"&gt;I’m red&lt;/div&gt;
&lt;style&gt;
.message {
  color: red;
}
&lt;/style&gt;
&lt;/Control&gt;

&lt;Control name="Green"&gt;
&lt;div class="message"&gt;I’m green&lt;/div&gt;
&lt;style&gt;
.message {
  color: green;
}
&lt;/style&gt;
&lt;/Control&gt;
</pre>
</control>

<example>
<pre>
&lt;Red/&gt;
&lt;Green/&gt;
</pre>
</example>

<result>
<FeatureScopingDemo/>
</result>

</Feature>
</prototype>
</Control>
