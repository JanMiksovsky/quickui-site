<Control className="Page11">
<prototype>
<TutorialPage title="More on styling">

<h2>Styling the top level of a control</h2>

<p>
In the previous example, we applied styling just to a single <Tag>span</Tag> within
a Greet instance. If we want the styling to apply to the entire control, we can remove
the ID reference from the rule in the <Tag>style</Tag> tag:
</p>

<SourceFileContents path="Greet.qui" />

<p>
This style rule is not a legal CSS rule on its own, but will get transformed into:
</p>

<pre>
.Greet {
    font-family: Arial, Helvetica, sans serif;
    font-size: 11pt;
}
</pre>
<p>
The above CSS <i>is</i> legal, and will apply the styling to the control’s outermost
element and everything it contains.
</p>
<p>
In general, all CSS rules enclosed in a QuickUI control’s <Tag>style</Tag> tag will have
the control’s class name prepended to it. One exception: if a CSS rule already begins
with the control’s class name, then the qc compiler leaves the rule as is.
</p>

<h2>Styling a control instance</h2>
<p>
In addition to having a control class define its own styles, we can style a specific
control from the outside using normal CSS rules. We can have our Sample control
assign an ID to a specific Greet instance, and then Sample can style that instance in
a <Tag>style</Tag> tag of its own. As before, we’ll also take this opportunity to wrap
the Sample control’s prototype in a <Tag>prototype</Tag> tag.
</p>

<SourceFileContents path="Sample.qui" />

<p>
Now all Greet instances appear in the desired font, and the middle Greet instance
receives extra styling:
</p>

<CodeOutput>
    <Sample/>
</CodeOutput>

<p>
This is possible because an “id” attribute on the control instance (here, Greet)
will get transferred to the control’s outer <Tag>div</Tag>, allowing normal CSS rules
to work. Similarly, any “class” attribute specified on a control instance will get
included in the control’s outer element as well.
</p>

<h2>Considerations when styling control instances from the “outside”</h2>

<p>
Care must be taken when you have one control extensively styling the controls it contains,
because this can lead to undesirable dependencies between the controls. Because there’s
no way for a DOM element to hide its contents, it can be all too tempting to have the outer
control exploit knowledge of how a contained control is built. For example, 
nothing to prevent the Sample control from specifing a CSS rule that applies an element within
Greet like Greet_content. Such a dependency can produce issues if the Greet control is
later modified to store its content differently.
</p>

<p>
As a general guideline, it’s often acceptable to let an outer control override a control’s
styling through general CSS attributes like font-family and color which are set on the
inner control’s topmost element (as shown above). Beyond that, if a need arises to style
specific elements within a control, it’s usually better to let the control style itself.
The control might support different appearances by exposing properties specifically intended
to alter its appearance, which preserves both flexibility and maintainability.
</p>

<Link href="/tutorial/section12">Next ></Link>

</TutorialPage>
</prototype>
</Control>