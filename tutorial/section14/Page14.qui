<Control name="Page14">
<prototype>
<TutorialPage title="Subclassing controls">

<p>
If a particular control class instance — with properties filled out a particular way,
say, or with particular styling — is likely to be repeated elsewhere, the instance can itself
become the prototype for a new class of control. This is perhaps the most powerful
aspect of QuickUI, and the most important ingredient in effectively factoring 
a UI into classes that can focus on very specific duties. 
</p>

<h2>Factoring aspects of a control instance into a new subclass</h2>

<p>
In our Sample control, the Greet instance with the ID “bob” is a particular
emphatic greeting, with an exclamation point as punctuation, and bold red styling.
We can lift out these aspects and create a new subclass of Greet called
EmphaticGreet (and stored in EmphaticGreet.qui):
</p>

<SourceCode sourceFile="EmphaticGreet.qui" />

<p>
This control doesn’t define a <Tag>content</Tag> tag. Instead it uses a tag
we haven’t seen yet: a <Tag>prototype</Tag>.
A control class’ <Tag>prototype</Tag> identifies an object that will
created to serve as the prototype or starting point for new instances of Greet.
If no prototype is specified, the default prototype is the base Control
class. The Quick markup above overrides this default behavior, and specifies that
new instances of the EmphaticGreet class should be created by first instantiating
the Greet class. The generated code for EmphaticGreet will see to it that
EmphaticGreet.prototype = new Greet().
</p>

<p>
A QuickUI prototype goes beyond the behavior of a normal JavaScript prototype in that
it can also indicate a set of default property values that should be set on new
control instances. Here this includes setting a new control’s punctuation property to "!".
</p>

<p>
The above definition for EmphaticGreet does not define a content property, so it
inherits the one defined for Greet. It also inherits all the behavior of Greet,
including the click-to-edit behavior.
</p>

<h2>Using the new subclass</h2>

<p>
Having factored out this emphatic behavior into own class, we can apply that class to the
original “bob” control element, and simplify the definition of the Sample control. Let’s
also add an additional instance of the EmphaticGreet class at the end:
</p>

<SourceCode sourceFile="Sample.qui" />

<p>
All instances of our new EmphaticGreet class receive the same styling and content
(the exclamation mark as punctuation):
</p>

<CodeOutput>
	<Sample/>
</CodeOutput>

<p>
Significantly, we’re deriving behavior here, not copying and pasting it. If we make further
modifications to the Greet class, those will be automatically picked up by the EmphaticGreet
class.
</p>

<h2>Conclusion</h2>

<p>
This concludes this introduction to some of the features of QuickUI. The samples shown here
are just toys, but they illustrate how QuickUI extends the same benefits of modular,
object-oriented development to the realm of user interfaces created with standard web
technologies: HTML, CSS, and JavaScript.
</p>

<p><Link href="/downloads/default.html">Download QuickUI</Link></p>
<p><Link href="/gallery/default.html">Explore the Gallery</Link></p>
<p><Link href="/docs/default.html">Read the framework docs</Link></p>
<p><Link href="/home/default.html">Return to Home</Link></p>

<AddThis/>

</TutorialPage>
</prototype>
</Control>