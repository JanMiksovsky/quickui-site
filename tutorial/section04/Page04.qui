<Control name="Page04">
<prototype>
<TutorialPage title="Referencing control elements">

<p>
Even the fixed HTML content we’ve been dealing with thus far has some utility, but controls
obviously get much more interesting when their content is dynamic. As a trivial example, let’s
change our Greet control so that someone using that control can have the Greet control
refer to a specific person by name. The name will be able to vary from control instance
to control instance.
</p>
<p>
When we’re finished, we’ll be able to set a property on a control through JavaScript:
</p>
<pre>
var g = $( "div" ).control( Greet );
g.content( "Alice" );
</pre>
<p>
and through Quick markup:
</p>
<pre>
&lt;Greet&gt;Alice&lt;/Greet&gt;
</pre>

<p>
with the goal that either of the above would output something like, “Hello, Alice!”
</p>

<h2>Identifying control elements with IDs</h2>
<p>
First we need to identify where the name should be rendered in the control content by using a
standard HTML “id” attribute. We can replace the static text “world” used earlier with a
<Tag>span</Tag> that has an ID:
</p>

<SourceFileContents path="Greet.qui" />

<p>
(We could make this more efficient by assigning the ID to the <Tag>i</Tag> tag itself,
but the above arrangement is more convenient for some modifications we’ll make later.)
</p>
    
<h2>Element functions</h2>

<p>
At compile time, the qc compiler traverses the Quick markup looking for HTML tags or QuickUI class
tags with “id” attributes. Any IDs found in this way will be compiled into JavaScript properties
on the control class. The key property assignment to this.Greet_content can be found halfway through
the generated code:
</p>

<SourceFileContents path="build/Greet.js" />

<p>
The key expression is
</p>

<![CDATA[
<pre>
this._define( "$Greet_content", Control( "&lt;span id=\"Greet_content\" /&gt;" ) )
</pre>
]]>

<p>
This line is doing three distinct things:
</p>

<ol>
    
<li>
First, the bit on the right creates
a <Tag>span</Tag> element via a standard jQuery call. It doesn't look like it,
but since the Control class is a subclass of jQuery, the Control(...) call
is really just like a normal $("&lt;span/&gt;") element creation.
</li>

<li>
The second piece of work here is to save a reference to that just-created element
behind the scenes, as part of the control's $.data(). This reference ensures that
the control can always quickly retrieve the specific <Tag>span</Tag> that belongs to it.
This is both safer and faster than trying to search again for that element. (When one
control contains another control, the possibility arises for an ID collision.)
</li>

<li>
Finally, the third act here is to define a new function on the Greet prototype
called $Greet_content(). This is called an <i>element function</i> that
returns the saved reference to the <Tag>span</Tag>.  An element function is essentially
a mapping function that maps a control, or array of controls, to the desired
sub-elements in the control's DOM. E.g., if we are holding a jQuery array of three
Greet instances, then called $Greet_content() on that array will return an array
with references to the three corresponding spans inside those controls.
</li>

</ol>

<p>
The QuickUI compiler and framework allow you to use DOM IDs to easily bridge the
two different namespaces of DOM elements and JavaScript functions. If you create
an element with id="foo", you'll end up with a function called $foo() that lets
you quickly and safely retrieve that element. 
</p>

<p>
It is still possible to obtain a reference to the <Tag>span</Tag>, for
example with jQuery functions like find("#Greet_content"), and there are some cases where that can
still be useful. The primary disadvantage of such a run-time search is that the
search isn’t guaranteed to find the right element on the right control instance.
</p>

<p>
There’s no semantic value to the identifier "Greet_content" — we could have called it
anything — but including the class name in the identifier simplifies debugging. If we need
to examine the DOM at run time, it’ll be clear what role the <Tag>span</Tag> is playing
and which class put that element there.
</p>

<Link href="/tutorial/section05">Next ></Link>

</TutorialPage>
</prototype>
</Control>