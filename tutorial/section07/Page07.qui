<Control name="Page07">
<prototype>
<TutorialPage title="Compact property definition using property bindings">

<h2>Declaring a property using a chain of jQuery calls</h2>
<p>
Defining a control property like Greet.content is so common, the QuickUI framework
includes some JavaScript helper classes to more concisely define common types of properties.
The Greet.content property in this example is a very common type of property:
a control property backed by, or <i>bound to</i>, the contents of a specific
HTML element within the control’s DOM.
</p>

<pre>
content: function( value ) {
    if ( value === undefined ) {
        return this.$Greet_content().eq(0).html();
    } else {
        this.$Greet_content().html( value );
        return this;
    }
}
</pre>

<p>
To facilitate construction of such functions, the QuickUI run-time library includes
a helper function called chain() that serves as a factory for functions like the one above.
So we can replace the above property definition with this one:
</p>

<pre>
content: Control.chain( "$Greet_content", "html" )
</pre>

<p>
The function chain() itself returns a function that will apply the indicated
parameters as a jQuery-style chain. When invoked as a setter, i.e., with a defined
argument, the function will pass that argument to the function indicated by the final
parameter. In the above example, that would be $.html(). As a result, the two function
definitions above are equivalent.
</p>

<p>
Using chain reduces the amount of code required to define control properties,
and correspondingly reduces the chances for bugs. It also allows someone else reading the
code to clearly see the intent of the property declaration. In the example above,
the developer wishes to expose the HTML content an element called with id="Greet_content"
via a getter/setter function called content().
</p>

<h2>Using the content() function</h2>

<p>
The use of the $.html() function above can be replaced with a more flexible function
defined in QuickUI called content(). The $.html() function can only deal with strings,
but the content() function can work with real DOM elements or jQuery objects.
In that regard, it's similar the jQuery $.contents() function (with a plural "s"),
only content() can also be called as a setter while $.contents() is read-only.
</p>

<p>
So it will generally be more useful to define our content function with content()
as the last part of the chain:
</p>

<pre>
content: Control.chain( "$Greet_content", "content" )
</pre>

<p>
This definition uses the word "content" several times. What it says is, "The content
of a Greet control can be saved in, or read from, the content of the element called
with id='Greet_content'." In other words, the Greet control is <i>delegating</i>
its content to one of the elements it contains.
</p>

<h2>Defining multiple “slots” with additional properties</h2>

<p>
Let’s adapt our Greet control to use the Control.chain() property factory above.
Since it’s so easy to define new control properties, let’s extend our Greet control
with an additional property to control the type of punctuation used at the end of the
greeting:
</p>

<SourceFileContents path="Greet.qui" />

<p>
We can then use the new slot like this:
</p>

<SourceFileContents path="Sample.qui" />

<p>
This produces:
</p>

<CodeOutput>
    <Sample/>
</CodeOutput>

<p>
Both the control content and the additional punctuation can be set separately.
In this way, you can easily define various “slots” for content which can then be filled in by
consumers of your control. A common use for this is to create templates of various kinds:
templates for chunks of content that vary only in certain places, templates for entire pages,
etc.
</p>

<h2>Chaining property calls</h2>

<p>
Property functions defined using chain return "this", and therefore support jQuery-style
chaining.
</p>

<pre>
$(".Greet")                 // Get all Greet elements on the page.
    .control()              // Cast them to their original Greet class.
    .content( "Angela" )    // Set the content of all of them.
    .punctuation( "!" );    // Set the punctunation of all of them.
</pre>

<Link href="/tutorial/section08/default.html">Next ></Link>

</TutorialPage>
</prototype>
</Control>