<Control className="Page10">
<prototype>
<MarkupAreaPage title="Styling controls">

<h2>Styling a control element</h2>
<p>
Our two controls, Greet and Sample, have to this point accepted whatever default
formatting is provided by the browser. You can define formatting for a control
through the addition of a <Tag>style</Tag> tag, much as you can in HTML:
</p>

<SourceFileContents path="Greet.qui" />

<p>
When the control is built, the qc compiler will extract the contents of the
<Tag>style</Tag> tag and emit a standard CSS file to hold those style rules:
</p>

<pre>
$ <b>qb</b>
Greet.qui
demo.js
demo.css
$ 
</pre>

<p>
Building the QuickUI project emits build/Greet.css, which gets put into the 
combined demo.css that holds CSS from all the QuickUI controls in the project.
Until now, the file Greet.css was empty, but it will now include the CSS defined
in the <Tag>style</Tag> tag above. Since we have only defined style information for
one control, Greet, for now Greet.css and the combined demo.css will be identical.
</p>

<p>
We can include the combined demo.css file in our sample HTML page:
</p>

<pre>
&lt;link rel="stylesheet" type="text/css" href="demo.css" /&gt;
</pre>

<p>
Opening demo.html now shows the indicated styling applied to the Greet control’s content:
</p>

<CodeOutput>
    <Sample/>
</CodeOutput>

<p>
Significantly, the CSS style rules for this control are bundled right alongside
the control’s DOM elements and its JavaScript. This ensures all three aspects of
a control travel together. It also ensures locality of reference: when debugging
a control, it’s a simple matter to look from the DOM elements to the adjacent
style rules or vice versa.
</p>

<h2>Automatic scoping of control styles</h2>
<p>
If we inspect the contents of generated Greet.css file, we can see the <Tag>style</Tag>
tag contents extracted from Greet.qui — along with a small but important transformation:
</p>

<SourceFileContents path="build/Greet.css" />

<p>
The original CSS rule for #Greet_content has been prepended with a reference to the
element class “.Greet”. The result of this transformation is that the CSS rules in
Greet.css will only apply to DOM elements with the class “Greet”.
</p>
<p>
Earlier it was mentioned that the top-level element of an instantiated QuickUI control
will include the name of the control’s class and the names of all its parent classes.
For reference, the run-time DOM for a Greet control now looks something like:
</p>

<pre>
&lt;div class="Greet Control"&gt;
    Hello,
    &lt;span id="Greet_content"&gt;Alice&lt;/span&gt;
    &lt;span id="Greet_punctuation"&gt;.&lt;/span&gt;
&lt;/div&gt;
</pre>

<p>
Because the above CSS rule begins with “.Greet”, the rule can be generally expected to
only apply within the DOM for a Greet control. If another DOM element on the page
happened to have the ID “Greet_content”, the rule is unlikely to fire.
</p>
<p>
This scoping is not bullet-proof. If a control itself contains complex HTML content,
and that content includes an element that matches the CSS rule, the styling would be
applied to that element as well. This is largely a theoretical weakness, and doesn’t
arise often in practice. (One special case is a control instance that hosts another
instance of the same control class. Both will include elements with the same IDs,
so the CSS will apply to both. However, in such cases it is generally desired to
apply the same formatting to both, so the end result is usually acceptable.)
</p>

<Link href="/markup/tutorial/section11">Next ></Link>

</MarkupAreaPage>
</prototype>
</Control>