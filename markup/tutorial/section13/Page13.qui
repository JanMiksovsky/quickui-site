<Control className="Page13">
<prototype>
<TutorialPage title="Controlling behavior">

<h2>Defining a property that governs behavior</h2>

<p>
Control properties can do more than simply populate chunks of the control’s contents.
Control properties can also modify the appearance of the control, for example by applying
classes that trigger the application of additional CSS rules. Control properties can also
modify control behavior.
</p>

<p>
If we find there are cases where we don’t want our Greet control to be clickable, we
can govern that behavior by defining a “enabled” property. When this property is set
to false, the control will ignore clicks:
</p>

<SourceFileContents path="Greet.qui" />

<p>
The enabled property is defined by calling the helper function applyClass(),
which returns a function that adds or removes a CSS class from a named element.
This function is identical to $.toggleClass() when invoked as a setter (i.e.,
it sets the indicated class), and to $.hasClass() when invoked as a getter (it
indicates whether or not the element has the indicated class). Here we use
some syntax supported by the chain() function to pass a parameter to applyClass:
the name of the class we want to get or set.
</p>

<p>
The resulting Greet.enabled() function can be called with no parameters to obtain a boolean
that indicates whether the CSS class "enabled" is currently applied.
Alternatively, a boolean parameter can be supplied to add the indicated CSS style
(if the parameter is true) or remove the style (if the parameter is false).
We use the <Tag>style</Tag> tag to define the desired appearance of an enabled
Greet instance to include a pointer control when the mouse is over the main content element.
</p>

<p>
It's very common for a control to have a function like Greet.enabled() above which
delegates an aspect of its appearance to a CSS class. Significantly, hosts of this
control can remain unaware of the use of CSS, and confine their attention to the
boolean semantics of the enabled() property.
</p>

<p>
With this in place, our Sample control can now enable or disable a Greet control
through markup. We can leave the first two <Tag>Greet</Tag> tags alone,
but apply the disabled property to the third:
</p>

<SourceFileContents path="Sample.qui" />

<p>
With this change, clicking “Alice” or “Bob” will invoke the dialog we defined earlier,
but now clicking “Carol” will not.
</p>

<CodeOutput>
    <Sample/>
</CodeOutput>

<Link href="/tutorial/section14">Next ></Link>

</TutorialPage>
</prototype>
</Control>