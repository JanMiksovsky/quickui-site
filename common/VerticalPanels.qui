<Control name="VerticalPanels">

<prototype>
    <Layout>
        <div id="VerticalPanels_top" />
        <div id="VerticalPanels_content" />
        <div id="VerticalPanels_bottom" />
    </Layout>
</prototype>

<style>
{
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /*
    Setting height when not in fill mode prevents resize logic from
    cylcing endlessly and shouldn't otherwise affect anything.
    */
    height: 100%;
    position: relative;
}
> * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: relative; /* So inner controls can be absolutely positioned within */
}

.VerticalPanels.fill {
    overflow-y: hidden;
    position: absolute;
    width: 100%;
}
.VerticalPanels.fill #VerticalPanels_content {
    overflow-y: auto;
}
</style>

<script>
VerticalPanels.prototype.extend({
    
    bottom: Control.bindTo("$VerticalPanels_bottom", "content"),
    content: Control.bindTo("$VerticalPanels_content", "content"),
    fill: Control.bindTo("applyClass/fill"),
    top: Control.bindTo("$VerticalPanels_top", "content"),
    
    layout: function() {
        //this._log("layout");
        var panelHeight = this.$VerticalPanels_top().outerHeight() + this.$VerticalPanels_bottom().outerHeight();
        var availableHeight = this.height() - panelHeight;
        this.$VerticalPanels_content().height(availableHeight);
        return this;
    }
});
</script>

</Control>
