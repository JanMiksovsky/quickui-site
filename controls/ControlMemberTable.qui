<!-- Shows the documented members for a control class. -->
 
<Control className="ControlMemberTable">

<prototype>
    <DictionaryTable/>
</prototype>

<style>
{
    border-collapse: collapse;
}

> * {
    border-top: 1px dotted #D7C5B4;
}
> *:first-child {
    border: none;
}

> * > * {
    padding: 0.5em 1em 0.5em 0;
}
> * > *:first-child {
    color: #928274;
    font-weight: bold;
}
</style>

<script>
ControlMemberTable.prototype.extend({
    
    controlClass: Control.property[ "class" ]( function( controlClass ) {
        var documentation = this._classMemberDocumentation( controlClass );
        documentation = this._sortDictionary( documentation );
        this.content( documentation );
    }),
    
    /*
     * Return the documentation for the given class, including its base classes
     * up to (but not including) Control.
     */
    _classMemberDocumentation: function( controlClass, linkToDeclaringClass ) {
        
        var className = controlClass.className;
        var documentation = controlDocumentation[ className ] || {};
        documentation = this._formatDocumentation( documentation );
        
        if ( linkToDeclaringClass ) {
            // Append to each member description a link to this class' catalog page.
            for ( var member in documentation ) {
                documentation[ member ] = [
                    documentation[ member ],
                    " From ",
                    CatalogLink.create().content( className ),
                    "."
                ];
            }
        }
        
        var baseClassName = controlClass.classHierarchy.split(" ")[1];
        if ( baseClassName ) {
            var baseClass = Control.getClass( baseClassName );
            if ( baseClass && baseClass !== Control ) {
                // Add base class documentation to the documentation for this class.
                var baseClassDocumentation = this._classMemberDocumentation( baseClass, true );
                for ( var member in baseClassDocumentation ) {
                    /*
                     * Only grab base class members not already documented; we only
                     * want the description from the most specific class.
                     */
                    documentation[ member ] = documentation[ member ] || baseClassDocumentation[ member ];
                }
            }
        }
        
        return documentation; 
    },
    
    _formatDocumentation: function( documentation ) {
        var formattedDocumentation = {};
        if ( documentation ) {
            $.each( documentation, function( memberName, memberDescription ) {

                // Add break tags wherever there are consecutive line breaks.
                var formattedDescription = memberDescription.replace( /\n\n/g, "<br/><br/>" );
                
                // Add break tags wherever line breaks are followed by whitespace.
                formattedDescription = formattedDescription.replace( /\n\s+/g, "<br/>" );
                
                formattedDocumentation[ memberName ] = formattedDescription;
            });
        }
        return formattedDocumentation;
    },
    
    /*
     * Return a copy of the given dictionary with its items sorted by keys.
     */
    _sortDictionary: function( dictionary ) {
        
        var keys = [];
        for ( var key in dictionary ) {
            keys.push( key );
        }
        
        var sortedKeys = keys.sort();
        
        var result = {};
        for ( var i in sortedKeys ) {
            var key = sortedKeys[ i ];
            result[ key ] = dictionary[ key ];
        }
        
        return result;
    }
    
});

/*
 * Placeholder declaration that will keep things from failing if
 * the control documentation isn't loaded.
 */
var controlDocumentation = {};
</script>

</Control>
