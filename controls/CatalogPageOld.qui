<!-- An old-style Catalog page that focuses on markup. -->

<Control className="CatalogPageOld">

<prototype>
    <CatalogPage>
        <examples>

            <h2>Live demo</h2>
            <Demo>
                <div id="CatalogPageOld_demo"/>
            </Demo>
            
            <div id="sampleMarkup">
                <h2>Sample QuickUI markup to instantiate this control</h2>
                <SourceCode id="sampleCodeMarkup"/>
            </div>

            <div id="demoMarkup">
                <h2>QuickUI Markup for the demo above</h2>
                <SourceFileContents id="demoFileMarkup"/>
            </div>
            
            <div id="sampleJavaScript">
                <h2>Sample JavaScript to instantiate this control</h2>
                <SourceCode id="sampleCodeJavaScript"/>
            </div>
            
            <div id="demoJavaScript">
                <h2>JavaScript for the demo above</h2>
                <SourceFileContents id="demoFileJavaScript"/>
            </div>
            
        </examples>
    </CatalogPage>
</prototype>

<style>
/* Ensure demos with popups can pop them over the rest of the page */
#CatalogPageOld_demo {
    position: relative;
    z-index: 1;
}

#demoMarkup, #demoJavaScript {
    display: none;
}
</style>

<script>
CatalogPageOld.prototype.extend({
    
    autoFocus: Control.property.bool( null, true ),

    demo: Control.chain( "$CatalogPageOld_demo", "content" ),
    
    describeClass: function( describeClass ) {
        var result = this._super( describeClass );
        if ( describeClass !== undefined ) {
            var className = Control.getClass( describeClass ).className;

            if ( !this.demo() || this.demo().length === 0 ) {
                // As a default demo, instantiate the control.
                this.$CatalogPageOld_demo().transmute( className );
            }
            
            this.$sampleCodeMarkup().content(
                "<" + className + "/>"
            );
            this.$sampleCodeJavaScript().content(
                className + ".create();"
            );
        }
        return result;
    },

    demoClass: Control.property[ "class" ]( function( demoClass ) {
         this.$CatalogPageOld_demo().transmute( demoClass );
    }),

    // Demo in markup hides stock "instantiate this control" markup.
    demoFileMarkup: Control.chain( "$demoFileMarkup", "path",
       function( demoFileMarkup ) {
           this.$sampleMarkup().toggle( demoFileMarkup == null );
           this.$demoMarkup().toggle( demoFileMarkup != null );
       }
    ),

    // Demo in JavaScript hides stock "instantiate this control" JavaScript.
    demoFileJavaScript: Control.chain( "$demoFileJavaScript", "path",
       function( demoFileJavaScript ) {
           this.$sampleJavaScript().toggle( demoFileJavaScript == null );
           this.$demoJavaScript().toggle( demoFileJavaScript != null );
       }
    ),
    
    initialize: function() {
        this._super();
        this.inDocument( function() {
            if ( this.autoFocus() ) {
                // Give the input to first text box or text area in the demo. 
                this.$CatalogPageOld_demo()
                    .find( "input[type='text']" )
                    .add( "textarea" )
                    .eq(0)
                    .focus();
            }
        });
    }
    
});
</script>

</Control>
