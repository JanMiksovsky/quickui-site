<!-- A page in the QuickUI Catalog. -->

<Control className="CatalogPage">

<prototype>
    <SitePage>
        <navigationLinks>
            <CatalogNavigationLinks/>
        </navigationLinks>
        <content>
            
            <div ref="CatalogPage_summary" class="section"/>

            <CodeEditor ref="editor" heading="Live demo" />
            
            <div ref="sectionBaseClasses" class="section">
                <h2>Class relationships</h2>
                <!-- <ControlClassHierarchy ref="controlClassHierarchy"/> -->
                <p>
                    This shows the control's base classes (in black),
                    other classes used by the control, and any subclasses.
                </p>
                <ControlClassGraph ref="controlClassGraph" />
            </div>
            
            <div ref="sectionMembers" class="section">
                <h2>Class members</h2>
                <ControlMemberTable ref="controlMemberTable"/>
            </div>

            <div ref="sectionContent" class="section">
                <h2>Notes</h2>
                <div ref="CatalogPage_content" />
            </div>

            <div ref="sectionSource" class="section">
                <p>
                    View the <Link ref="linkSourceCodeControl"/> on GitHub.
                </p>
            </div>

        </content>
    </SitePage>
</prototype>

<style>
.SitePage_content {
    max-width: inherit;
}

.section,
.controlClassGraph {
    max-width: 800px;
}

.editor {
    margin-top: 1em;
}

.sectionSource,
.sectionContent {
    display: none;
}
</style>

<script>
CatalogPage.prototype.extend({
    
    autoRun: Control.chain( "$editor", "autoRun" ),
    
    content: Control.chain( "$CatalogPage_content", "content", function( content ) {
        this.$sectionContent().toggle( content != null );
    }),
    
    describeClass: Control.property[ "class" ]( function( describeClass ) {

        this.$controlClassGraph().graphClass( describeClass );
        
        var className = describeClass.prototype.className;
        this.$controlMemberTable().describeClass( className );
        var hasDocumentation = !$.isEmptyObject( $(".ControlMemberTable").control().content() );
        this.$sectionMembers().toggle( hasDocumentation );

        var documentation = controlDocumentation[ className ];
        var fileType = documentation && documentation.type;
        if ( fileType ) {

            var folder = ( fileType === "qui" ) ? "markup" : fileType;
            var fileName = className;
            if ( fileType !== "qui" && documentation.baseClass ) {
                fileName += "." + documentation.baseClass;
            }

            this._loadDemo( className );

            fileName += "." + fileType;
            var sourceUrlTemplate = "https://github.com/JanMiksovsky/quickui-catalog/blob/master/{0}/{1}";
            var sourceUrl = sourceUrlTemplate
                .replace( /\{0\}/g, folder )
                .replace( /\{1\}/g, fileName );
            var sourceLinkText = "full source for " + className;
            this.$linkSourceCodeControl()
                .text( sourceLinkText )
                .href( sourceUrl );
            this.$sectionSource().show();
        }

    }),
    
    summary: Control.chain( "$CatalogPage_summary", "content" ),

    title: function( title ) {
        var result = this._super( title );
        if ( title !== undefined ) {
            // Grab control class name from the title, use it to populate
            // the fields with standard values.
            this.describeClass( title );
        }
        return result;
    },
    
    // Return the source code for the class' demo function. For class Foo, the
    // demo function should be called demoFoo. If not found, this returns null.
    _demoSource: function( className ) {
        var demoFunctionName = "demo" + className;
        var demoFunction = window[ demoFunctionName ];
        if ( demoFunction == null ) {
            return null;
        }
        var code = demoFunction.toString();
        if ( code.length > 0 ) {
            // Remove the the demo function wrapper, which should be the first
            // and last lines.
            lines = code.split( "\n" );
            lines = lines.slice( 1, lines.length - 2 );
            code = $.trim( lines.join( "\n" ) );
        }
        return code;
    },

    _loadDemo: function( className ) {
        var demoSource = this._demoSource( className );
        if ( demoSource && demoSource.length > 0 ) {
            this.$editor().code( demoSource );
        } else {
            this.$editor().hide();
        }
    }

});
</script>

</Control>
